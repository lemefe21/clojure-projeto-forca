lein repl (para abrir o Leiningen):

user=> (+ 2 4)
6
user=> (+ 1 2)
3
user=> (def idade 29) //idade guarda o valor 30, mas em programação funcional ela não varia de valor
#'user/idade
user=> idade
29
user=> (+ idade 2)
31
user=> idade
29
user=> exit
Bye for now!

Criando uma aplicação com Leiningen:

C:\Users>lein new app forca
Generating a project called forca based on the 'app' template



Passando para Clojure:

4 + (1+2)			=	(+ 4 (+ 1 2))

4 + (1+20) - 7		= 	(- (+ 4 (+ 20 1)) 7)

5 * (10 / 2) + 1	= 	(+ (* 5 (/ 10 2)) 1)



Exemplos:

	(defn mult2 [x] (* x 2))

	(defn mult-square [x] (* x (+ 2 x)))

	(defn pow3 [x] (* x (Math/pow 2 x)))



Jogo forca:

forca.core=> (print "Voce perdeu")
Voce perdeunil
forca.core=> (require '[forca.core :as forca] :reload)
nil
forca.core=> (forca/perdeu)
Voce perdeu...nil

	(defn jogo [vidas] 
		(if (= vidas 0)
			(perdeu)
			(do
				(print vidas)
				(jogo (dec vidas)) - chamada recursiva
			)
		)
	)

jogo (- vidas 1)
jogo (dec vidas) - resultado igual mais voltado para Clojure



Programação funcional é fortemente voltada para a matemática:
como funções que invocam a si próprias como a função Fibonacci
fib(0) = 0
fib(1) = 1
fib(n) = fib(n-1) + fib(n-2), se n >= 2

Em Clojure:

	(defn fibonacci [n]
		(if (= n 0) 0
			(if (= n 1) 1
				(+ (fibonacci (- n 1)) (fibonacci (- n 2)))
			)
		)
	)

forca.core=> (forca/jogo 5 "palavra" #{"A" "M"})
Voce ganhou!nil



Exemplo Função MAP com conjuntos:
pega cada um dos elementos e aplica uma função

forca.core=> (def nums [1 2 3 4 5])
#'forca.core/nums
forca.core=> nums
[1 2 3 4 5]
forca.core=> (defn mult [n] (* n 2))
#'forca.core/mult
forca.core=> (mult 3)
6
forca.core=> (map mult nums)
(2 4 6 8 10)
forca.core=> (map (fn [n] (* n 3)) nums)
(3 6 9 12 15)
forca.core=> (defn par [x] (= 0 (rem x 2)))
#'forca.core/par
forca.core=> (remove par nums) - podemos passar funções como parametros
(1 3 5)
forca.core=> nums - variaveis não variam
[1 2 3 4 5]
forca.core=> conjunto
#{"L" "M" "A"}
forca.core=> (conj conjunto "X") >> função conj add no conjunto
#{"L" "M" "X" "A"}
forca.core=> (disj conjunto "L")
#{"M" "A"}

Função filter:

user=> (filter (fn [x] (or (< x 2) (> x 4))) numeros)
(1 5)

Função Contains:

forca.core=> (def palavra #{"A" "L" "M" "R"})
#'forca.core/palavra
forca.core=> palavra
#{"L" "M" "R" "A"}
forca.core=> (contains? palavra "A")
true
forca.core=> (contains? palavra "Z")
false


	(defn letras-faltantes [palavra acertos]
		(remove (fn [letra] (contains? acertos (str letra)) )
			palavra
		)
	)

forca.core=> (forca/letras-faltantes "LEME" #{"E"})
(\L \M)

	(defn acertou-a-palavra-toda? [palavra acertos]
		(empty? (letras-faltantes palavra acertos))
	)

	(defn jogo [vidas palavra acertos] 
		(if (= vidas 0)
			(perdeu)
			(if (acertou-a-palavra-toda? palavra acertos)
				(ganhou)
					(print "Chuta!")
			)
		)
	)

forca.core=> (require '[forca.core :as forca] :reload)
nil
forca.core=> (forca/jogo 5 "JAVA" #{"J"})
Chuta!nil
forca.core=> (forca/jogo 5 "JAVA" #{"J" "A"})
Chuta!nil
forca.core=> (forca/jogo 5 "JAVA" #{"J" "A" "V"})
Voce ganhou!nil


Utiliza o ambiente da JVM:
função do Java

	(.contains palavra chute)


Lendo do teclado:

forca.core=> (forca/jogo 3 "LARANJA" #{})
Z
A
D
C
Voce perdeu...nil
forca.core=> (forca/jogo 3 "LARANJA" #{})
A
L
R
N
J
Voce ganhou!!!nil


Pega uma letra do teclado e converte para Integer:

	(* 7 (Integer/parseInt (le-letra!)))


O let abre um novo escopo.
A palavra recur é usada para a recursão de cauda.
	- Evitar o empilhamento comum em recursão.

o "inc" significa incremento (++) lembrando que a "variavel" incrementada
não tem o seu valor alterado, exp: (inc contador)


Função preguiçosa:

	(defn imprime-forca [vidas palavra acertos]
		(println "Vidas: " vidas)
		(doseq [letra (seq palavra)]
			(if (contains? acertos (str letra))
				(print letra " ")
				(print "_" " ")))
		(println))

Imprime a quantidade de vidas restantes, para cada letra da palavra "loop - (doseq)" 
ele verifica de a letra está em no array "acertos - #{ }", se estiver é impresso a 
letra e um espaço, se não é impresso um underscore e espaço.

Isso acontece porque em linguagens funcionais existe o conceito de função preguiçosa, 
a qual não é executada até ser pedido seu resultado.


Empacotando:

	(def palavra-secreta "ALURA")

	(defn comeca-o-jogo [] (jogo total-de-vidas palavra-secreta #{}))

	(defn -main [& args]
		(comeca-o-jogo))

C:\Leme\ProjetosJava\Alura\Clojure\forca>lein run
Vidas:  6
_  _  _  _  _

Para gerar o .jar
C:\Leme\ProjetosJava\Alura\Clojure\forca>lein uberjar
	